# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        
        #goal is to have two lists. one is the first half
        #the second half is reversed
        
        p1, p2 = head, head.next
        
        while p2 and p2.next:
            p1 = p1.next
            p2 = p2.next.next
        
        toReverse = p1.next
        prev = None
        p1.next = None
        
        while toReverse:
            temp = toReverse.next
            toReverse.next = prev
            prev = toReverse
            toReverse = temp
            
        #heads are now head and prev
        while prev:
            t1, t2 = head.next, prev.next
            head.next = prev
            prev.next = t1
            head, prev = t1, t2
            
        